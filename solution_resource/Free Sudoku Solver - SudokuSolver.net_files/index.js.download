var lastTouchEnd = 0;
document.documentElement.addEventListener('touchend', (function(event) {
  event = event || window.event;

  var now;
  now = (new Date).getTime();
  if (now - lastTouchEnd <= 300) {
    event.preventDefault();
  }
  lastTouchEnd = now;
}), false);
// --

var currentCell;
var moves = [];
var cells = document.getElementsByClassName('cell');

for (var i = cells.length - 1; i >= 0; i--) {
  var cell = cells[i];

  cell.addEventListener('keydown', function(event) {
    event = event || window.event;

    var charCode = (typeof event.which == 'undefined') ? event.keyCode : event.which;
    var charString = String.fromCharCode(charCode);

    switch (charCode) {
      case 97:
        charString = '1';
        break;
      case 98:
        charString = '2';
        break;
      case 99:
        charString = '3';
        break;
      case 100:
        charString = '4';
        break;
      case 101:
        charString = '5';
        break;
      case 102:
        charString = '6';
        break;
      case 103:
        charString = '7';
        break;
      case 104:
        charString = '8';
        break;
      case 105:
        charString = '9';
        break;
      case 8:
        charString = '';
        break;
      case 9:
        var cellIndex = Array.prototype.indexOf.call(cells, event.target);
        var nextCell;
        if (cellIndex == cells.length - 1) {
          nextCell = cells[0];
        } else {
          nextCell = cells[cellIndex + 1];
        }

        currentCell.classList.remove('current-cell');
        currentCell = nextCell;
        currentCell.classList.add('current-cell');
        currentCell.select();
        drawCellHightlighting();

        break;
    }

    if (['', '1', '2', '3', '4', '5', '6', '7', '8', '9'].indexOf(charString) > -1) {
      moves.push([Array.prototype.indexOf.call(cells, event.target), event.target.value, charString]);
      event.target.value = charString;

      validateCurrentCell();

      if (charString == '') {
        event.target.classList.remove('inputed-cell');
      } else {
        event.target.classList.add('inputed-cell');
      }
    }

    event.preventDefault();
  });

  cell.addEventListener('click', function() {
    this.classList.add('current-cell');
    if (typeof currentCell !== 'undefined' && currentCell !== null) {
      currentCell.classList.remove('current-cell');
    }

    currentCell = this;
    drawCellHightlighting();
  });
}

var keys = document.getElementsByClassName('key');
for (var i = keys.length - 1; i >= 0; i--) {
  var key = keys[i];
  key.addEventListener('click', function(event) {
    var value = this.getAttribute('data-value');
    moves.push([Array.prototype.indexOf.call(cells, currentCell), currentCell.value, value]);
    currentCell.value = value;

    validateCurrentCell();

    event.preventDefault();
  });
}

var clearKey = document.getElementById('clear-key');
clearKey.addEventListener('click', function(event) {
  currentCell.classList.remove('inputed-cell');

  event.preventDefault();
});

var undoElement = document.getElementById('undo');
undoElement.addEventListener('click', function(event) {
  event = event || window.event;
  undo();
  event.preventDefault();
});

var clear = document.getElementById('clear');
clear.addEventListener('click', function(event) {
  for (var i = moves.length - 1; i >= 0; i--) {
    setTimeout(function() { undo(); }, Math.round(350 * i / moves.length));
  }

  event.preventDefault();
});

function undo() {
  if (moves.length > 0) {
    var move = moves[moves.length - 1];
    cells[move[0]].value = move[1];
    moves.pop();

    currentCell.classList.remove('current-cell');
    currentCell.classList.remove('inputed-cell');
    currentCell.classList.remove('invalid-cell');

    if (moves.length == 0) {
      document.getElementById('undo').setAttribute('disabled', 'true');
      currentCell = null;
    } else {
      currentCell = cells[moves[moves.length - 1][0]];
      currentCell.classList.add('current-cell');
    }
  }
  drawCellHightlighting();
  validateCurrentCell();
}

function drawCellHightlighting() {
  var highlightedCells = document.getElementsByClassName('highlighted-cell');
  for (var i = highlightedCells.length - 1; i >= 0; i--) {
    var highlightedCell = highlightedCells[i];
    highlightedCell.classList.remove('highlighted-cell');
  }

  if (currentCell) {
    var cellRow = currentCell.parentElement.parentElement;
    var currentCellHorizontalIndex = Array.prototype.indexOf.call(cellRow.children, currentCell.parentElement);
    var horizontalCells = cellRow.getElementsByClassName('cell');
    for (var i = horizontalCells.length - 1; i >= 0; i--) {
      var cell = horizontalCells[i];
      cell.classList.add('highlighted-cell');
    }

    var tableRows = currentCell.parentElement.parentElement.parentElement.getElementsByTagName('tr');
    for (var i = tableRows.length - 1; i >= 0; i--) {
      var tableRow = tableRows[i];
      var cell = tableRow.getElementsByClassName('cell')[currentCellHorizontalIndex];
      cell.classList.add('highlighted-cell');
    }
  }
}

function Solver() {
  this.working_grid = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
  ];
};

Solver.prototype.validate_row = function (r, c) {
  var value = this.working_grid[r][c];
  for (var _c = 0; _c < 9; _c++) {
    if (_c != c && this.working_grid[r][_c] == value) {
      return false;
    }
  }

  return true;
};

Solver.prototype.validate_column = function (r, c) {
  var value = this.working_grid[r][c];
  for (var _r = 0; _r < 9; _r++) {
    if (_r != r && this.working_grid[_r][c] == value) {
      return false;
    }
  }

  return true;
};

Solver.prototype.validate_box = function (r, c) {
  var value = this.working_grid[r][c];
  var box_r = Math.floor(r / 3);
  var box_c = Math.floor(c / 3);

  for (var _r = box_r * 3; _r < box_r * 3 + 3; _r++) {
    for (var _c = box_c * 3; _c < box_c * 3 + 3; _c++) {
      if (_r != r && _c != c && this.working_grid[_r][_c] == value) {
        return false;
      }
    }
  }

  return true;
};

Solver.prototype.backtrack = function (r, c) {
  c++; // Move to next cell in row
  if (c > 8) { // Moves to next row when end of column is reached
    c = 0;
    r++;
    if (r > 8) { // Checks if end of grid is reached
      return true;
    }
  }

  if (this.working_grid[r][c] != 0) { // Move to next cell if user has entered a number in current cell
    if (!(this.validate_row(r, c) && this.validate_column(r, c) && this.validate_box(r, c))){
      return false;
    }

    return this.backtrack(r, c);
  } else { // Goes through all possible numbers if user has left cell blank
    for (var x = 1; x < 10; x++) {
      this.working_grid[r][c] = x;
      if (this.validate_row(r, c) &&  this.validate_column(r, c) && this.validate_box(r, c)){
        if (this.backtrack(r, c)) {
          return true;
        }
      }
    }

    this.working_grid[r][c] = 0;
    return false;
  }
};

Solver.prototype.solve = function () {
  // Validate initial grid
  for(var r = 0; r < 9; r++){
    for(var c = 0; c < 9; c++) {
      if (this.working_grid[r][c] != 0 && !(this.validate_row(r, c) && this.validate_column(r, c) && this.validate_box(r, c))){
        return false;
      }
    }
  }

  return this.backtrack(0, -1);
};

var solve = document.getElementById('solve');
solve.addEventListener('click', function(event) {
  var solver = new Solver();

  for (var i = 0; i < 9; i++) {
    for (var y = 0; y < 9; y++) {
      index = i * 9 + y;
      cell  = cells[index];
      solver.working_grid[i][y] = cell.value;
    }
  }

  if (solver.solve()) {
    for (var i = 0; i < 9; i++) {
      for (var y = 0; y < 9; y++) {
        index = i * 9 + y;
        cell  = cells[index];
        moves.push([Array.prototype.indexOf.call(cells, cell), cell.value, solver.working_grid[i][y]]);
        cell.value = solver.working_grid[i][y];
      }
    }
  } else {
    alert("No solutions found!");
  }
});

printElement = document.getElementById('print');
printElement.addEventListener('click', function(event) {
  // domtoimage
  // domtoimage.toPng(document.getElementById('sudoku')).then(function(dataUrl) {
  //   var image = new Image();
  //   image.src = dataUrl;

  //   var download = document.getElementById('download');
  //   download.setAttribute('download', 'sudoku-solved-at-sudokusolver.net');
  //   download.setAttribute('href', dataUrl);

  //   var preview = document.getElementById('preview');
  //   preview.innerHTML = '';
  //   preview.appendChild(image);

  //   $('#preview-modal').modal('show');
  // });
  //

  setTimeout(function() {
    try {
      document.execCommand('print', false, null);
    } catch(e) {
      window.print();
    }
  }, 150);
  event.preventDefault();
});

function validateCurrentCell() {
  if (currentCell) {
    if (currentCell.value == '') {
      currentCell.classList.remove('invalid-cell');
      return;
    }

    var cellRow = currentCell.parentElement.parentElement;
    var currentCellHorizontalIndex = Array.prototype.indexOf.call(cellRow.children, currentCell.parentElement);
    var horizontalCells = cellRow.getElementsByClassName('cell');
    for (var i = horizontalCells.length - 1; i >= 0; i--) {
      var cell = horizontalCells[i];

      if (cell.value == currentCell.value && cell != currentCell) {
        currentCell.classList.add('invalid-cell');
        return;
      }
    }

    var tableRows = currentCell.parentElement.parentElement.parentElement.getElementsByTagName('tr');
    for (var i = tableRows.length - 1; i >= 0; i--) {
      var tableRow = tableRows[i];
      var cell = tableRow.getElementsByClassName('cell')[currentCellHorizontalIndex];

      if (cell.value == currentCell.value && cell != currentCell) {
        currentCell.classList.add('invalid-cell');
        return;
      }
    }

    var rowIndex  = Array.prototype.indexOf.call(cellRow.parentElement.children, cellRow);
    var squareTableRows = [];
    var switches  = [];

    if ([0, 3, 6].indexOf(rowIndex) > -1) {
      squareTableRows = [cellRow.nextElementSibling, cellRow.nextElementSibling.nextElementSibling];
    } else if ([1, 4, 7].indexOf(rowIndex) > -1) {
      squareTableRows = [cellRow.nextElementSibling, cellRow.previousElementSibling];
    } else {
      squareTableRows = [cellRow.previousElementSibling, cellRow.previousElementSibling.previousElementSibling];
    }

    if ([0, 3, 6].indexOf(currentCellHorizontalIndex) > -1) {
      switches = [1, 2];
    } else if ([1, 4, 7].indexOf(currentCellHorizontalIndex) > -1) {
      switches = [1, -1];
    } else {
      switches = [-1, -2];
    }

    for (var i = 0; i < 2; i++) {
      var squareTableRow = squareTableRows[i];

      for (var y = 0; y < 2; y++) {
        var cell = squareTableRow.getElementsByClassName('cell')[currentCellHorizontalIndex + switches[y]];

        if (cell.value == currentCell.value) {
          currentCell.classList.add('invalid-cell');
          return;
        }
      }
    }

    currentCell.classList.remove('invalid-cell');
  }
}
